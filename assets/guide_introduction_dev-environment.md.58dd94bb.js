import{_ as s,o as a,c as n,V as e}from"./chunks/framework.a438cccc.js";const u=JSON.parse('{"title":"环境准备","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduction/dev-environment.md","filePath":"guide/introduction/dev-environment.md"}'),o={name:"guide/introduction/dev-environment.md"},t=e(`<h1 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h1><p>为了保证开发时，大家有一个良好的开发环境，编写此文档。</p><h2 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h2><p>小伙伴对于Git使用不清晰的话，我会带你设置一遍。</p><h3 id="安装git" tabindex="-1">安装Git <a class="header-anchor" href="#安装git" aria-label="Permalink to &quot;安装Git&quot;">​</a></h3><p>官方地址: <a href="https://git-scm.com/" target="_blank" rel="noreferrer">git</a></p><p>Windows 可以直接进行安装下载。</p><p>MacOS 安装可安装下面的命令 <code>brew install git</code></p><h3 id="配置git" tabindex="-1">配置Git <a class="header-anchor" href="#配置git" aria-label="Permalink to &quot;配置Git&quot;">​</a></h3><h4 id="_1-配置用户和邮箱" tabindex="-1">1.配置用户和邮箱 <a class="header-anchor" href="#_1-配置用户和邮箱" aria-label="Permalink to &quot;1.配置用户和邮箱&quot;">​</a></h4><p>在终端中运行下面的命令</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你的用户名</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.email</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你的邮箱</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h4 id="_2-设置默认分支" tabindex="-1">2.设置默认分支 <a class="header-anchor" href="#_2-设置默认分支" aria-label="Permalink to &quot;2.设置默认分支&quot;">​</a></h4><p>git默认分支为master，当你每次创建一个仓库默认设置改为main <code>git config --global init.defaultBranch main</code></p><h4 id="_3-ssh-key" tabindex="-1">3.SSH-key <a class="header-anchor" href="#_3-ssh-key" aria-label="Permalink to &quot;3.SSH-key&quot;">​</a></h4><p>当然，以下是关于如何在GitHub上配置SSH密钥的详细步骤：</p><p><strong>1. 检查是否已经有SSH密钥</strong> 在你的终端中输入<code>ls -al ~/.ssh</code>来查看是否已经有SSH密钥。如果你看到<code>id_rsa.pub</code>（或<code>id_dsa.pub</code>），那就说明你已经有了一个SSH密钥。</p><p><strong>2. 生成新的SSH密钥</strong> 如果你没有SSH密钥或者想要为GitHub创建一个新的SSH密钥，可以通过以下命令生成一个新的SSH密钥：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ssh-keygen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rsa</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4096</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你的邮箱</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>这里的&quot;你的邮箱&quot;是你在GitHub上注册的邮箱，这会将你的密钥与你的GitHub账户相关联。</p><p>你会被提示输入文件保存位置和设置密码，如果想要使用默认设置，可以一路回车即可。</p><p><strong>3. 添加SSH密钥到ssh-agent</strong> 在默认设置下，你的私钥将会保存在<code>~/.ssh/id_rsa</code>，公钥则会保存在<code>~/.ssh/id_rsa.pub</code>。</p><p>运行以下命令以确保ssh-agent是启动的：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">eval</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">ssh-agent</span><span style="color:#C3E88D;"> -s</span><span style="color:#89DDFF;">)&quot;</span></span></code></pre></div><p>然后，添加你的私钥到ssh-agent：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ssh-add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/id_rsa</span></span></code></pre></div><p>注意，如果你在第二步中选择了不同的文件名或路径，你需要将上述命令中的<code>~/.ssh/id_rsa</code>替换为你的私钥文件路径。</p><p><strong>4. 添加SSH密钥到GitHub账户</strong> 首先，你需要获取你的公钥的内容，你可以通过以下命令查看和复制你的公钥：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.ssh/id_rsa.pub</span></span></code></pre></div><p>然后，在GitHub的设置页面中找到&quot;SSH and GPG keys&quot;，点击&quot;New SSH key&quot;。</p><p>在&quot;Title&quot;字段中，输入一个对你有意义的标题，如&quot;我的个人电脑&quot;。然后在&quot;Key&quot;字段中，粘贴你的公钥内容。</p><p>最后，点击&quot;Add SSH key&quot;。</p><p><strong>5. 测试SSH连接</strong> 你可以通过以下命令测试你的SSH连接是否正常：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ssh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-T</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github.com</span></span></code></pre></div><p>如果看到“Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.”的消息，那就说明你已经成功配置了SSH密钥。</p><h2 id="node-js" tabindex="-1">node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;node.js&quot;">​</a></h2><p>建议使用nvm进行node版本控制。 确实，<code>nvm</code>（Node Version Manager）是一个非常方便的工具，它可以让你在同一台机器上安装和使用多个版本的Node.js。然后，<code>pnpm</code>是一种用于Node.js包管理的有效工具，它使用硬链接和符号链接的策略来节省存储空间并提高性能。</p><p>下面是在Windows上使用<code>nvm</code>安装Node.js和<code>pnpm</code>的步骤：</p><p><strong>1. 安装nvm</strong> 在Windows上，你可以使用<code>nvm-windows</code>，它是<code>nvm</code>的一个Windows版本。首先，你需要访问其GitHub页面：<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noreferrer">https://github.com/coreybutler/nvm-windows</a></p><p>然后，点击&quot;latest version&quot;链接，下载<code>nvm-setup.zip</code>文件。解压这个文件，然后运行其中的<code>nvm-setup.exe</code>进行安装。</p><p><strong>2. 安装Node.js</strong> 使用nvm安装Node.js非常简单。在命令行中输入以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">latest</span></span></code></pre></div><p>这将会安装最新版本的Node.js。你也可以通过指定版本号来安装特定版本的Node.js，例如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18.16</span><span style="color:#C3E88D;">.0</span></span></code></pre></div><p>然后，你可以使用下面的命令来设置默认使用的Node.js版本：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">nvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">use</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18.16</span><span style="color:#C3E88D;">.0</span></span></code></pre></div><p><strong>3. 安装pnpm</strong> 一旦你已经安装了Node.js，你就可以使用Node.js的包管理器npm来安装pnpm。在命令行中输入以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span></span></code></pre></div><p>这个命令将会全局安装pnpm。</p><h2 id="运行后台" tabindex="-1">运行后台 <a class="header-anchor" href="#运行后台" aria-label="Permalink to &quot;运行后台&quot;">​</a></h2><p>项目地址: <a href="https://github.com/InkMarkNest/ink-nest-admin" target="_blank" rel="noreferrer">通用后台Github</a></p><h3 id="拉取代码" tabindex="-1">拉取代码 <a class="header-anchor" href="#拉取代码" aria-label="Permalink to &quot;拉取代码&quot;">​</a></h3><p>运行下面的命令，把远程仓库的代码拉到本地上</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github.com:InkMarkNest/ink-nest-admin.git</span></span>
<span class="line"><span style="color:#FFCB6B;">or</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/InkMarkNest/ink-nest-admin.git</span></span></code></pre></div><h3 id="安装开发依赖" tabindex="-1">安装开发依赖 <a class="header-anchor" href="#安装开发依赖" aria-label="Permalink to &quot;安装开发依赖&quot;">​</a></h3><p>当你把代码拉到本地上时，记得进入当前项目的文件。 运行下面命令进入到项目文件夹中。 <code>cd ink-nest-admin</code></p><p><strong>1.安装依赖</strong> 运行下面的命令，安装所需的文件。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p><strong>2.运行程序</strong> 当安装成功后，运行我们的后台。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev</span></span></code></pre></div><p><strong>3.在浏览器中预览</strong> 当运行成功后，命令行会提示成功 我们可以进入到浏览器，访问后台。 <a href="http:localhost:2333" target="_blank" rel="noreferrer">http:localhost:2333</a></p><p>这就是后台基本的环境以及运行项目的大致过程。</p>`,62),l=[t];function p(c,r,i,d,h,C){return a(),n("div",null,l)}const g=s(o,[["render",p]]);export{u as __pageData,g as default};
